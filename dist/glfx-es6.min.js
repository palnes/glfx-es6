!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("fx",[],t):"object"==typeof exports?exports.fx=t():e.fx=t()}("undefined"!=typeof self?self:this,function(){return function(e){function t(o){if(r[o])return r[o].exports;var a=r[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,t),a.l=!0,a.exports}var r={};return t.m=e,t.c=r,t.d=function(e,r,o){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:o})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="/dist/",t(t.s=5)}([function(e,t,r){"use strict";function o(e){n=Object.assign(n,e)}function a(e){return n[e]}Object.defineProperty(t,"__esModule",{value:!0}),t.set=o,t.get=a;var n={}},function(e,t,r){"use strict";function o(e,t,r,o){(r||this._.texture).use(),this._.spareTexture.drawTo(function(){e.uniforms(t).drawRect()}),this._.spareTexture.swapWith(o||this._.texture)}function a(e,t,r){return Math.max(e,Math.min(t,r))}function n(e){for(var t=new l.default(e),r=[],o=0;o<256;o++)r.push(a(0,Math.floor(256*t.interpolate(o/255)),255));return r}Object.defineProperty(t,"__esModule",{value:!0}),t.simpleShader=o,t.clamp=a,t.splineInterpolate=n;var i=r(6),l=function(e){return e&&e.__esModule?e:{default:e}}(i)},function(e,t,r){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e){return"[object Array]"==Object.prototype.toString.call(e)}function n(e){return"[object Number]"==Object.prototype.toString.call(e)}function i(e,t){var r=c.get("gl"),o=r.createShader(e);if(r.shaderSource(o,t),r.compileShader(o),!r.getShaderParameter(o,r.COMPILE_STATUS))throw"compile error: "+r.getShaderInfoLog(o);return o}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),u=r(0),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(u),s="attribute vec2 vertex;attribute vec2 _texCoord;varying vec2 texCoord;void main() {  texCoord = _texCoord;  gl_Position = vec4(vertex * 2.0 - 1.0, 0.0, 1.0);}",f="uniform sampler2D texture;varying vec2 texCoord;void main() {  gl_FragColor = texture2D(texture, texCoord);}",d=function(){function e(t,r){o(this,e);var a=c.get("gl");if(this.vertexAttribute=null,this.texCoordAttribute=null,this.program=a.createProgram(),t=t||s,r=r||f,r="precision highp float;"+r,a.attachShader(this.program,i(a.VERTEX_SHADER,t)),a.attachShader(this.program,i(a.FRAGMENT_SHADER,r)),a.linkProgram(this.program),!a.getProgramParameter(this.program,a.LINK_STATUS))throw"link error: "+a.getProgramInfoLog(this.program)}return l(e,null,[{key:"getDefaultShader",value:function(){var t=c.get("gl");return t.defaultShader=t.defaultShader||new e,t.defaultShader}}]),l(e,[{key:"destroy",value:function(){c.get("gl").deleteProgram(this.program),this.program=null}},{key:"uniforms",value:function(e){var t=c.get("gl");t.useProgram(this.program);for(var r in e)if(e.hasOwnProperty(r)){var o=t.getUniformLocation(this.program,r);if(null!==o){var i=e[r];if(a(i))switch(i.length){case 1:t.uniform1fv(o,new Float32Array(i));break;case 2:t.uniform2fv(o,new Float32Array(i));break;case 3:t.uniform3fv(o,new Float32Array(i));break;case 4:t.uniform4fv(o,new Float32Array(i));break;case 9:t.uniformMatrix3fv(o,!1,new Float32Array(i));break;case 16:t.uniformMatrix4fv(o,!1,new Float32Array(i));break;default:throw"dont't know how to load uniform \""+r+'" of length '+i.length}else{if(!n(i))throw'attempted to set uniform "'+r+'" to invalid value '+(i||"undefined").toString();t.uniform1f(o,i)}}}return this}},{key:"textures",value:function(e){var t=c.get("gl");t.useProgram(this.program);for(var r in e)e.hasOwnProperty(r)&&t.uniform1i(t.getUniformLocation(this.program,r),e[r]);return this}},{key:"drawRect",value:function(e,t,r,o){var a=c.get("gl"),n=a.getParameter(a.VIEWPORT);t=void 0!==t?(t-n[1])/n[3]:0,e=void 0!==e?(e-n[0])/n[2]:0,r=void 0!==r?(r-n[0])/n[2]:1,o=void 0!==o?(o-n[1])/n[3]:1,null==a.vertexBuffer&&(a.vertexBuffer=a.createBuffer()),a.bindBuffer(a.ARRAY_BUFFER,a.vertexBuffer),a.bufferData(a.ARRAY_BUFFER,new Float32Array([e,t,e,o,r,t,r,o]),a.STATIC_DRAW),null==a.texCoordBuffer&&(a.texCoordBuffer=a.createBuffer(),a.bindBuffer(a.ARRAY_BUFFER,a.texCoordBuffer),a.bufferData(a.ARRAY_BUFFER,new Float32Array([0,0,0,1,1,0,1,1]),a.STATIC_DRAW)),null==this.vertexAttribute&&(this.vertexAttribute=a.getAttribLocation(this.program,"vertex"),a.enableVertexAttribArray(this.vertexAttribute)),null==this.texCoordAttribute&&(this.texCoordAttribute=a.getAttribLocation(this.program,"_texCoord"),a.enableVertexAttribArray(this.texCoordAttribute)),a.useProgram(this.program),a.bindBuffer(a.ARRAY_BUFFER,a.vertexBuffer),a.vertexAttribPointer(this.vertexAttribute,2,a.FLOAT,!1,0,0),a.bindBuffer(a.ARRAY_BUFFER,a.texCoordBuffer),a.vertexAttribPointer(this.texCoordAttribute,2,a.FLOAT,!1,0,0),a.drawArrays(a.TRIANGLE_STRIP,0,4)}}]),e}();t.default=d},function(e,t,r){"use strict";function o(e,t){return new n.default(null,e+"    uniform sampler2D texture;    uniform vec2 texSize;    varying vec2 texCoord;    void main() {      vec2 coord = texCoord * texSize;      "+t+"      gl_FragColor = texture2D(texture, coord / texSize);      vec2 clampedCoord = clamp(coord, vec2(0.0), texSize);      if (coord != clampedCoord) {        /* fade to transparent if we are outside the image */        gl_FragColor.a *= max(0.0, 1.0 - length(coord - clampedCoord));      }    }")}Object.defineProperty(t,"__esModule",{value:!0}),t.randomShaderFunc=void 0,t.warpShader=o;var a=r(2),n=function(e){return e&&e.__esModule?e:{default:e}}(a);t.randomShaderFunc="  float random(vec3 scale, float seed) {    /* use the fragment position for a different seed per-pixel */    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);  }"},function(e,t,r){"use strict";function o(e,t,r,o,a,n,i,l){var u=r-a,c=o-n,s=i-a,f=l-n,d=e-r+a-i,h=t-o+n-l,g=u*f-s*c,v=(d*f-s*h)/g,p=(u*h-d*c)/g;return[r-e+v*r,o-t+v*o,v,i-e+p*i,l-t+p*l,p,e,t,1]}function a(e){var t=e[0],r=e[1],o=e[2],a=e[3],n=e[4],i=e[5],l=e[6],u=e[7],c=e[8],s=t*n*c-t*i*u-r*a*c+r*i*l+o*a*u-o*n*l;return[(n*c-i*u)/s,(o*u-r*c)/s,(r*i-o*n)/s,(i*l-a*c)/s,(t*c-o*l)/s,(o*a-t*i)/s,(a*u-n*l)/s,(r*l-t*u)/s,(t*n-r*a)/s]}function n(e,t){return[e[0]*t[0]+e[1]*t[3]+e[2]*t[6],e[0]*t[1]+e[1]*t[4]+e[2]*t[7],e[0]*t[2]+e[1]*t[5]+e[2]*t[8],e[3]*t[0]+e[4]*t[3]+e[5]*t[6],e[3]*t[1]+e[4]*t[4]+e[5]*t[7],e[3]*t[2]+e[4]*t[5]+e[5]*t[8],e[6]*t[0]+e[7]*t[3]+e[8]*t[6],e[6]*t[1]+e[7]*t[4]+e[8]*t[7],e[6]*t[2]+e[7]*t[5]+e[8]*t[8]]}Object.defineProperty(t,"__esModule",{value:!0}),t.getSquareToQuad=o,t.getInverse=a,t.multiply=n},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}function a(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function n(e){return{_:e,loadContentsOf:function(e){p.set({gl:this._.gl}),this._.loadContentsOf(e)},destroy:function(){p.set({gl:this._.gl}),this._.destroy()}}}function i(e){return n(x.default.fromElement(e))}function l(e,t){var r=p.get("gl"),o=r.UNSIGNED_BYTE;if(r.getExtension("OES_texture_float")&&r.getExtension("OES_texture_float_linear")){var a=new x.default(100,100,r.RGBA,r.FLOAT);try{a.drawTo(function(){o=r.FLOAT})}catch(e){}a.destroy()}this._.texture&&this._.texture.destroy(),this._.spareTexture&&this._.spareTexture.destroy(),this.width=e,this.height=t,this._.texture=new x.default(e,t,r.RGBA,o),this._.spareTexture=new x.default(e,t,r.RGBA,o),this._.extraTexture=this._.extraTexture||new x.default(0,0,r.RGBA,o),this._.flippedShader=this._.flippedShader||new y.default(null,"    uniform sampler2D texture;    varying vec2 texCoord;    void main() {      gl_FragColor = texture2D(texture, vec2(texCoord.x, 1.0 - texCoord.y));    }  "),this._.isInitialized=!0}function u(e,t,r){return this._.isInitialized&&e._.width==this.width&&e._.height==this.height||l.call(this,t||e._.width,r||e._.height),e._.use(),this._.texture.drawTo(function(){y.default.getDefaultShader().drawRect()}),this}function c(){return this._.texture.use(),this._.flippedShader.drawRect(),this}function s(e){return e.parentNode.insertBefore(this,e),e.parentNode.removeChild(e),this}function f(){var e=p.get("gl"),t=new x.default(this._.texture.width,this._.texture.height,e.RGBA,e.UNSIGNED_BYTE);return this._.texture.use(),t.drawTo(function(){y.default.getDefaultShader().drawRect()}),n(t)}function d(){var e=p.get("gl"),t=this._.texture.width,r=this._.texture.height,o=new Uint8Array(t*r*4);return this._.texture.drawTo(function(){e.readPixels(0,0,t,r,e.RGBA,e.UNSIGNED_BYTE,o)}),o}function h(e){return function(){return p.set({gl:this._.gl}),e.apply(this,arguments)}}Object.defineProperty(t,"__esModule",{value:!0}),t.splineInterpolate=void 0;var g=r(1);Object.defineProperty(t,"splineInterpolate",{enumerable:!0,get:function(){return g.splineInterpolate}});var v=r(0),p=a(v),m=r(7),x=o(m),_=r(2),y=o(_),b=r(8),w=a(b);t.default={canvas:function(){var e=document.createElement("canvas");try{p.set({gl:e.getContext("experimental-webgl",{premultipliedAlpha:!1})})}catch(e){p.set({gl:null})}var t=p.get("gl");if(!t)throw"This browser does not support WebGL";return e._={gl:t,isInitialized:!1,texture:null,spareTexture:null,flippedShader:null},e.texture=h(i),e.draw=h(u),e.update=h(c),e.replace=h(s),e.contents=h(f),e.getPixelArray=h(d),e.brightnessContrast=h(w.brightnessContrast),e.hexagonalPixelate=h(w.hexagonalPixelate),e.hueSaturation=h(w.hueSaturation),e.colorHalftone=h(w.colorHalftone),e.triangleBlur=h(w.triangleBlur),e.unsharpMask=h(w.unsharpMask),e.perspective=h(w.perspective),e.matrixWarp=h(w.matrixWarp),e.bulgePinch=h(w.bulgePinch),e.tiltShift=h(w.tiltShift),e.dotScreen=h(w.dotScreen),e.edgeWork=h(w.edgeWork),e.lensBlur=h(w.lensBlur),e.zoomBlur=h(w.zoomBlur),e.noise=h(w.noise),e.denoise=h(w.denoise),e.curves=h(w.curves),e.swirl=h(w.swirl),e.ink=h(w.ink),e.vignette=h(w.vignette),e.vibrance=h(w.vibrance),e.sepia=h(w.sepia),e}}},function(e,t,r){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var a=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),n=function(){function e(t){o(this,e);var r=t.length;this.xa=[],this.ya=[],this.u=[],this.y2=[],t.sort(function(e,t){return e[0]-t[0]});for(var a=0;a<r;a++)this.xa.push(t[a][0]),this.ya.push(t[a][1]);this.u[0]=0,this.y2[0]=0;for(var a=1;a<r-1;++a){var n=this.xa[a+1]-this.xa[a-1],i=(this.xa[a]-this.xa[a-1])/n,l=i*this.y2[a-1]+2;this.y2[a]=(i-1)/l;var u=(this.ya[a+1]-this.ya[a])/(this.xa[a+1]-this.xa[a])-(this.ya[a]-this.ya[a-1])/(this.xa[a]-this.xa[a-1]);this.u[a]=(6*u/n-i*this.u[a-1])/l}this.y2[r-1]=0;for(var a=r-2;a>=0;--a)this.y2[a]=this.y2[a]*this.y2[a+1]+this.u[a]}return a(e,[{key:"interpolate",value:function(e){for(var t=this.ya.length,r=0,o=t-1;o-r>1;){var a=o+r>>1;this.xa[a]>e?o=a:r=a}var n=this.xa[o]-this.xa[r],i=(this.xa[o]-e)/n,l=(e-this.xa[r])/n;return i*this.ya[r]+l*this.ya[o]+((i*i*i-i)*this.y2[r]+(l*l*l-l)*this.y2[o])*(n*n)/6}}]),e}();t.default=n},function(e,t,r){"use strict";function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e){null==s&&(s=document.createElement("canvas")),s.width=e.width,s.height=e.height;var t=s.getContext("2d");return t.clearRect(0,0,s.width,s.height),t}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){function e(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,r,o){return r&&e(t.prototype,r),o&&e(t,o),t}}(),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i),u=r(2),c=function(e){return e&&e.__esModule?e:{default:e}}(u),s=null,f=function(){function e(t,r,a,n){o(this,e);var i=l.get("gl");this.gl=i,this.id=i.createTexture(),this.width=t,this.height=r,this.format=a,this.type=n,i.bindTexture(i.TEXTURE_2D,this.id),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,i.LINEAR),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,i.LINEAR),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE),t&&r&&i.texImage2D(i.TEXTURE_2D,0,this.format,t,r,0,this.format,this.type,null)}return n(e,null,[{key:"fromElement",value:function(t){var r=l.get("gl"),o=new e(0,0,r.RGBA,r.UNSIGNED_BYTE);return o.loadContentsOf(t),o}}]),n(e,[{key:"loadContentsOf",value:function(e){var t=l.get("gl");this.width=e.width||e.videoWidth,this.height=e.height||e.videoHeight,t.bindTexture(t.TEXTURE_2D,this.id),t.texImage2D(t.TEXTURE_2D,0,this.format,this.format,this.type,e)}},{key:"initFromBytes",value:function(e,t,r){var o=l.get("gl");this.width=e,this.height=t,this.format=o.RGBA,this.type=o.UNSIGNED_BYTE,o.bindTexture(o.TEXTURE_2D,this.id),o.texImage2D(o.TEXTURE_2D,0,o.RGBA,e,t,0,o.RGBA,this.type,new Uint8Array(r))}},{key:"destroy",value:function(){l.get("gl").deleteTexture(this.id),this.id=null}},{key:"use",value:function(e){var t=l.get("gl");t.activeTexture(t.TEXTURE0+(e||0)),t.bindTexture(t.TEXTURE_2D,this.id)}},{key:"unuse",value:function(e){var t=l.get("gl");t.activeTexture(t.TEXTURE0+(e||0)),t.bindTexture(t.TEXTURE_2D,null)}},{key:"ensureFormat",value:function(e,t,r,o){if(1==arguments.length){var a=arguments[0];e=a.width,t=a.height,r=a.format,o=a.type}if(e!=this.width||t!=this.height||r!=this.format||o!=this.type){var n=l.get("gl");this.width=e,this.height=t,this.format=r,this.type=o,n.bindTexture(n.TEXTURE_2D,this.id),n.texImage2D(n.TEXTURE_2D,0,this.format,e,t,0,this.format,this.type,null)}}},{key:"drawTo",value:function(e){var t=l.get("gl");if(t.framebuffer=t.framebuffer||t.createFramebuffer(),t.bindFramebuffer(t.FRAMEBUFFER,t.framebuffer),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,this.id,0),t.checkFramebufferStatus(t.FRAMEBUFFER)!==t.FRAMEBUFFER_COMPLETE)throw new Error("incomplete framebuffer");t.viewport(0,0,this.width,this.height),e(),t.bindFramebuffer(t.FRAMEBUFFER,null)}},{key:"fillUsingCanvas",value:function(e){e(a(this));var t=l.get("gl");return this.format=t.RGBA,this.type=t.UNSIGNED_BYTE,t.bindTexture(t.TEXTURE_2D,this.id),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,s),this}},{key:"toImage",value:function(e){this.use(),c.default.getDefaultShader().drawRect();var t=l.get("gl"),r=this.width*this.height*4,o=new Uint8Array(r),n=a(this),i=n.createImageData(this.width,this.height);t.readPixels(0,0,this.width,this.height,t.RGBA,t.UNSIGNED_BYTE,o);for(var u=0;u<r;u++)i.data[u]=o[u];n.putImageData(i,0,0),e.src=s.toDataURL()}},{key:"swapWith",value:function(e){var t;t=e.id,e.id=this.id,this.id=t,t=e.width,e.width=this.width,this.width=t,t=e.height,e.height=this.height,this.height=t,t=e.format,e.format=this.format,this.format=t}}]),e}();t.default=f},function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var a=r(9);Object.defineProperty(t,"brightnessContrast",{enumerable:!0,get:function(){return o(a).default}});var n=r(10);Object.defineProperty(t,"curves",{enumerable:!0,get:function(){return o(n).default}});var i=r(11);Object.defineProperty(t,"denoise",{enumerable:!0,get:function(){return o(i).default}});var l=r(12);Object.defineProperty(t,"hueSaturation",{enumerable:!0,get:function(){return o(l).default}});var u=r(13);Object.defineProperty(t,"noise",{enumerable:!0,get:function(){return o(u).default}});var c=r(14);Object.defineProperty(t,"sepia",{enumerable:!0,get:function(){return o(c).default}});var s=r(15);Object.defineProperty(t,"unsharpMask",{enumerable:!0,get:function(){return o(s).default}});var f=r(16);Object.defineProperty(t,"vibrance",{enumerable:!0,get:function(){return o(f).default}});var d=r(17);Object.defineProperty(t,"vignette",{enumerable:!0,get:function(){return o(d).default}});var h=r(18);Object.defineProperty(t,"lensBlur",{enumerable:!0,get:function(){return o(h).default}});var g=r(19);Object.defineProperty(t,"tiltShift",{enumerable:!0,get:function(){return o(g).default}});var v=r(20);Object.defineProperty(t,"triangleBlur",{enumerable:!0,get:function(){return o(v).default}});var p=r(21);Object.defineProperty(t,"zoomBlur",{enumerable:!0,get:function(){return o(p).default}});var m=r(22);Object.defineProperty(t,"colorHalftone",{enumerable:!0,get:function(){return o(m).default}});var x=r(23);Object.defineProperty(t,"dotScreen",{enumerable:!0,get:function(){return o(x).default}});var _=r(24);Object.defineProperty(t,"edgeWork",{enumerable:!0,get:function(){return o(_).default}});var y=r(25);Object.defineProperty(t,"hexagonalPixelate",{enumerable:!0,get:function(){return o(y).default}});var b=r(26);Object.defineProperty(t,"ink",{enumerable:!0,get:function(){return o(b).default}});var w=r(27);Object.defineProperty(t,"bulgePinch",{enumerable:!0,get:function(){return o(w).default}});var S=r(28);Object.defineProperty(t,"matrixWarp",{enumerable:!0,get:function(){return o(S).default}});var T=r(29);Object.defineProperty(t,"perspective",{enumerable:!0,get:function(){return o(T).default}});var C=r(30);Object.defineProperty(t,"swirl",{enumerable:!0,get:function(){return o(C).default}})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var r=l.get("gl");return r.brightnessContrast=r.brightnessContrast||new a.default(null,"    uniform sampler2D texture;    uniform float brightness;    uniform float contrast;    varying vec2 texCoord;    void main() {      vec4 color = texture2D(texture, texCoord);      color.rgb += brightness;      if (contrast > 0.0) {        color.rgb = (color.rgb - 0.5) / (1.0 - contrast) + 0.5;      } else {        color.rgb = (color.rgb - 0.5) * (1.0 + contrast) + 0.5;      }      gl_FragColor = color;    }  "),n.simpleShader.call(this,r.brightnessContrast,{brightness:(0,n.clamp)(-1,e,1),contrast:(0,n.clamp)(-1,t,1)}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){var o=l.get("gl");e=(0,n.splineInterpolate)(e),1==arguments.length?t=r=e:(t=(0,n.splineInterpolate)(t),r=(0,n.splineInterpolate)(r));for(var i=[],u=0;u<256;u++)i.splice(i.length,0,e[u],t[u],r[u],255);return this._.extraTexture.initFromBytes(256,1,i),this._.extraTexture.use(1),o.curves=o.curves||new a.default(null,"    uniform sampler2D texture;    uniform sampler2D map;    varying vec2 texCoord;    void main() {      vec4 color = texture2D(texture, texCoord);      color.r = texture2D(map, vec2(color.r)).r;      color.g = texture2D(map, vec2(color.g)).g;      color.b = texture2D(map, vec2(color.b)).b;      gl_FragColor = color;    }  "),o.curves.textures({map:1}),n.simpleShader.call(this,o.curves,{}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=l.get("gl");t.denoise=t.denoise||new a.default(null,"    uniform sampler2D texture;    uniform float exponent;    uniform float strength;    uniform vec2 texSize;    varying vec2 texCoord;    void main() {      vec4 center = texture2D(texture, texCoord);      vec4 color = vec4(0.0);      float total = 0.0;      for (float x = -4.0; x <= 4.0; x += 1.0) {        for (float y = -4.0; y <= 4.0; y += 1.0) {          vec4 sample = texture2D(texture, texCoord + vec2(x, y) / texSize);          float weight = 1.0 - abs(dot(sample.rgb - center.rgb, vec3(0.25)));          weight = pow(weight, exponent);          color += sample * weight;          total += weight;        }      }      gl_FragColor = color / total;    }  ");for(var r=0;r<2;r++)n.simpleShader.call(this,t.denoise,{exponent:Math.max(0,e),texSize:[this.width,this.height]});return this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var r=l.get("gl");return r.hueSaturation=r.hueSaturation||new a.default(null,"    uniform sampler2D texture;    uniform float hue;    uniform float saturation;    varying vec2 texCoord;    void main() {      vec4 color = texture2D(texture, texCoord);            /* hue adjustment, wolfram alpha: RotationTransform[angle, {1, 1, 1}][{x, y, z}] */      float angle = hue * 3.14159265;      float s = sin(angle), c = cos(angle);      vec3 weights = (vec3(2.0 * c, -sqrt(3.0) * s - c, sqrt(3.0) * s - c) + 1.0) / 3.0;      float len = length(color.rgb);      color.rgb = vec3(        dot(color.rgb, weights.xyz),        dot(color.rgb, weights.zxy),        dot(color.rgb, weights.yzx)      );            /* saturation adjustment */      float average = (color.r + color.g + color.b) / 3.0;      if (saturation > 0.0) {        color.rgb += (average - color.rgb) * (1.0 - 1.0 / (1.001 - saturation));      } else {        color.rgb += (average - color.rgb) * (-saturation);      }            gl_FragColor = color;    }  "),n.simpleShader.call(this,r.hueSaturation,{hue:(0,n.clamp)(-1,e,1),saturation:(0,n.clamp)(-1,t,1)}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=l.get("gl");return t.noise=t.noise||new a.default(null,"    uniform sampler2D texture;    uniform float amount;    varying vec2 texCoord;    float rand(vec2 co) {      return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);    }    void main() {      vec4 color = texture2D(texture, texCoord);            float diff = (rand(texCoord) - 0.5) * amount;      color.r += diff;      color.g += diff;      color.b += diff;            gl_FragColor = color;    }  "),n.simpleShader.call(this,t.noise,{amount:(0,n.clamp)(0,e,1)}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=l.get("gl");return t.sepia=t.sepia||new a.default(null,"    uniform sampler2D texture;    uniform float amount;    varying vec2 texCoord;    void main() {      vec4 color = texture2D(texture, texCoord);      float r = color.r;      float g = color.g;      float b = color.b;            color.r = min(1.0, (r * (1.0 - (0.607 * amount))) + (g * (0.769 * amount)) + (b * (0.189 * amount)));      color.g = min(1.0, (r * 0.349 * amount) + (g * (1.0 - (0.314 * amount))) + (b * 0.168 * amount));      color.b = min(1.0, (r * 0.272 * amount) + (g * 0.534 * amount) + (b * (1.0 - (0.869 * amount))));            gl_FragColor = color;    }  "),n.simpleShader.call(this,t.sepia,{amount:(0,n.clamp)(0,e,1)}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var r=l.get("gl");return r.unsharpMask=r.unsharpMask||new a.default(null,"    uniform sampler2D blurredTexture;    uniform sampler2D originalTexture;    uniform float strength;    uniform float threshold;    varying vec2 texCoord;    void main() {      vec4 blurred = texture2D(blurredTexture, texCoord);      vec4 original = texture2D(originalTexture, texCoord);      gl_FragColor = mix(blurred, original, 1.0 + strength);    }  "),this._.extraTexture.ensureFormat(this._.texture),this._.texture.use(),this._.extraTexture.drawTo(function(){a.default.getDefaultShader().drawRect()}),this._.extraTexture.use(1),this.triangleBlur(e),r.unsharpMask.textures({originalTexture:1}),n.simpleShader.call(this,r.unsharpMask,{strength:t}),this._.extraTexture.unuse(1),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=l.get("gl");return t.vibrance=t.vibrance||new a.default(null,"    uniform sampler2D texture;    uniform float amount;    varying vec2 texCoord;    void main() {      vec4 color = texture2D(texture, texCoord);      float average = (color.r + color.g + color.b) / 3.0;      float mx = max(color.r, max(color.g, color.b));      float amt = (mx - average) * (-amount * 3.0);      color.rgb = mix(color.rgb, vec3(mx), amt);      gl_FragColor = color;    }  "),n.simpleShader.call(this,t.vibrance,{amount:(0,n.clamp)(-1,e,1)}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var r=l.get("gl");return r.vignette=r.vignette||new a.default(null,"    uniform sampler2D texture;    uniform float size;    uniform float amount;    varying vec2 texCoord;    void main() {      vec4 color = texture2D(texture, texCoord);            float dist = distance(texCoord, vec2(0.5, 0.5));      color.rgb *= smoothstep(0.8, size * 0.799, dist * (amount + size));            gl_FragColor = color;    }  "),n.simpleShader.call(this,r.vignette,{size:(0,n.clamp)(0,e,1),amount:(0,n.clamp)(0,t,1)}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){var o=u.get("gl");o.lensBlurPrePass=o.lensBlurPrePass||new a.default(null,"    uniform sampler2D texture;    uniform float power;    varying vec2 texCoord;    void main() {      vec4 color = texture2D(texture, texCoord);      color = pow(color, vec4(power));      gl_FragColor = vec4(color);    }  ");var l="    uniform sampler2D texture0;    uniform sampler2D texture1;    uniform vec2 delta0;    uniform vec2 delta1;    uniform float power;    varying vec2 texCoord;    "+i.randomShaderFunc+"    vec4 sample(vec2 delta) {      /* randomize the lookup values to hide the fixed number of samples */      float offset = random(vec3(delta, 151.7182), 0.0);            vec4 color = vec4(0.0);      float total = 0.0;      for (float t = 0.0; t <= 30.0; t++) {        float percent = (t + offset) / 30.0;        color += texture2D(texture0, texCoord + delta * percent);        total += 1.0;      }      return color / total;    }  ";o.lensBlur0=o.lensBlur0||new a.default(null,l+"    void main() {      gl_FragColor = sample(delta0);    }  "),o.lensBlur1=o.lensBlur1||new a.default(null,l+"    void main() {      gl_FragColor = (sample(delta0) + sample(delta1)) * 0.5;    }  "),o.lensBlur2=o.lensBlur2||new a.default(null,l+"    void main() {      vec4 color = (sample(delta0) + 2.0 * texture2D(texture1, texCoord)) / 3.0;      gl_FragColor = pow(color, vec4(power));    }  ").textures({texture1:1});for(var c=[],s=0;s<3;s++){var f=r+s*Math.PI*2/3;c.push([e*Math.sin(f)/this.width,e*Math.cos(f)/this.height])}var d=Math.pow(10,(0,n.clamp)(-1,t,1));return n.simpleShader.call(this,o.lensBlurPrePass,{power:d}),this._.extraTexture.ensureFormat(this._.texture),n.simpleShader.call(this,o.lensBlur0,{delta0:c[0]},this._.texture,this._.extraTexture),n.simpleShader.call(this,o.lensBlur1,{delta0:c[1],delta1:c[2]},this._.extraTexture,this._.extraTexture),n.simpleShader.call(this,o.lensBlur0,{delta0:c[1]}),this._.extraTexture.use(1),n.simpleShader.call(this,o.lensBlur2,{power:1/d,delta0:c[2]}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(3),l=r(0),u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(l)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r,o,l,c){var s=u.get("gl");s.tiltShift=s.tiltShift||new a.default(null,"    uniform sampler2D texture;    uniform float blurRadius;    uniform float gradientRadius;    uniform vec2 start;    uniform vec2 end;    uniform vec2 delta;    uniform vec2 texSize;    varying vec2 texCoord;    "+i.randomShaderFunc+"    void main() {      vec4 color = vec4(0.0);      float total = 0.0;            /* randomize the lookup values to hide the fixed number of samples */      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);            vec2 normal = normalize(vec2(start.y - end.y, end.x - start.x));      float radius = smoothstep(0.0, 1.0, abs(dot(texCoord * texSize - start, normal)) / gradientRadius) * blurRadius;      for (float t = -30.0; t <= 30.0; t++) {        float percent = (t + offset - 0.5) / 30.0;        float weight = 1.0 - abs(percent);        vec4 sample = texture2D(texture, texCoord + delta / texSize * percent * radius);                /* switch to pre-multiplied alpha to correctly blur transparent images */        sample.rgb *= sample.a;                color += sample * weight;        total += weight;      }            gl_FragColor = color / total;            /* switch back from pre-multiplied alpha */      gl_FragColor.rgb /= gl_FragColor.a + 0.00001;    }  ");var f=r-e,d=o-t,h=Math.sqrt(f*f+d*d);return n.simpleShader.call(this,s.tiltShift,{blurRadius:l,gradientRadius:c,start:[e,t],end:[r,o],delta:[f/h,d/h],texSize:[this.width,this.height]}),n.simpleShader.call(this,s.tiltShift,{blurRadius:l,gradientRadius:c,start:[e,t],end:[r,o],delta:[-d/h,f/h],texSize:[this.width,this.height]}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(3),l=r(0),u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(l)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=u.get("gl");return t.triangleBlur=t.triangleBlur||new a.default(null,"    uniform sampler2D texture;    uniform vec2 delta;    varying vec2 texCoord;    "+i.randomShaderFunc+"    void main() {      vec4 color = vec4(0.0);      float total = 0.0;            /* randomize the lookup values to hide the fixed number of samples */      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);            for (float t = -30.0; t <= 30.0; t++) {        float percent = (t + offset - 0.5) / 30.0;        float weight = 1.0 - abs(percent);        vec4 sample = texture2D(texture, texCoord + delta * percent);                /* switch to pre-multiplied alpha to correctly blur transparent images */        sample.rgb *= sample.a;                color += sample * weight;        total += weight;      }            gl_FragColor = color / total;            /* switch back from pre-multiplied alpha */      gl_FragColor.rgb /= gl_FragColor.a + 0.00001;    }  "),n.simpleShader.call(this,t.triangleBlur,{delta:[e/this.width,0]}),n.simpleShader.call(this,t.triangleBlur,{delta:[0,e/this.height]}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(3),l=r(0),u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(l)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){var o=u.get("gl");return o.zoomBlur=o.zoomBlur||new a.default(null,"    uniform sampler2D texture;    uniform vec2 center;    uniform float strength;    uniform vec2 texSize;    varying vec2 texCoord;    "+i.randomShaderFunc+"    void main() {      vec4 color = vec4(0.0);      float total = 0.0;      vec2 toCenter = center - texCoord * texSize;            /* randomize the lookup values to hide the fixed number of samples */      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);            for (float t = 0.0; t <= 40.0; t++) {        float percent = (t + offset) / 40.0;        float weight = 4.0 * (percent - percent * percent);        vec4 sample = texture2D(texture, texCoord + toCenter * percent * strength / texSize);                /* switch to pre-multiplied alpha to correctly blur transparent images */        sample.rgb *= sample.a;                color += sample * weight;        total += weight;      }            gl_FragColor = color / total;            /* switch back from pre-multiplied alpha */      gl_FragColor.rgb /= gl_FragColor.a + 0.00001;    }  "),n.simpleShader.call(this,o.zoomBlur,{center:[e,t],strength:r,texSize:[this.width,this.height]}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(3),l=r(0),u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(l)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r,o){var i=l.get("gl");return i.colorHalftone=i.colorHalftone||new a.default(null,"    uniform sampler2D texture;    uniform vec2 center;    uniform float angle;    uniform float scale;    uniform vec2 texSize;    varying vec2 texCoord;        float pattern(float angle) {      float s = sin(angle), c = cos(angle);      vec2 tex = texCoord * texSize - center;      vec2 point = vec2(        c * tex.x - s * tex.y,        s * tex.x + c * tex.y      ) * scale;      return (sin(point.x) * sin(point.y)) * 4.0;    }        void main() {      vec4 color = texture2D(texture, texCoord);      vec3 cmy = 1.0 - color.rgb;      float k = min(cmy.x, min(cmy.y, cmy.z));      cmy = (cmy - k) / (1.0 - k);      cmy = clamp(cmy * 10.0 - 3.0 + vec3(pattern(angle + 0.26179), pattern(angle + 1.30899), pattern(angle)), 0.0, 1.0);      k = clamp(k * 10.0 - 5.0 + pattern(angle + 0.78539), 0.0, 1.0);      gl_FragColor = vec4(1.0 - cmy - k, color.a);    }  "),n.simpleShader.call(this,i.colorHalftone,{center:[e,t],angle:r,scale:Math.PI/o,texSize:[this.width,this.height]}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r,o){var i=l.get("gl");return i.dotScreen=i.dotScreen||new a.default(null,"    uniform sampler2D texture;    uniform vec2 center;    uniform float angle;    uniform float scale;    uniform vec2 texSize;    varying vec2 texCoord;        float pattern() {      float s = sin(angle), c = cos(angle);      vec2 tex = texCoord * texSize - center;      vec2 point = vec2(        c * tex.x - s * tex.y,        s * tex.x + c * tex.y      ) * scale;      return (sin(point.x) * sin(point.y)) * 4.0;    }        void main() {      vec4 color = texture2D(texture, texCoord);      float average = (color.r + color.g + color.b) / 3.0;      gl_FragColor = vec4(vec3(average * 10.0 - 5.0 + pattern()), color.a);    }  "),n.simpleShader.call(this,i.dotScreen,{center:[e,t],angle:r,scale:Math.PI/o,texSize:[this.width,this.height]}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=u.get("gl");return t.edgeWork1=t.edgeWork1||new a.default(null,"    uniform sampler2D texture;    uniform vec2 delta;    varying vec2 texCoord;    "+i.randomShaderFunc+"    void main() {      vec2 color = vec2(0.0);      vec2 total = vec2(0.0);            /* randomize the lookup values to hide the fixed number of samples */      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);            for (float t = -30.0; t <= 30.0; t++) {        float percent = (t + offset - 0.5) / 30.0;        float weight = 1.0 - abs(percent);        vec3 sample = texture2D(texture, texCoord + delta * percent).rgb;        float average = (sample.r + sample.g + sample.b) / 3.0;        color.x += average * weight;        total.x += weight;        if (abs(t) < 15.0) {          weight = weight * 2.0 - 1.0;          color.y += average * weight;          total.y += weight;        }      }      gl_FragColor = vec4(color / total, 0.0, 1.0);    }  "),t.edgeWork2=t.edgeWork2||new a.default(null,"    uniform sampler2D texture;    uniform vec2 delta;    varying vec2 texCoord;    "+i.randomShaderFunc+"    void main() {      vec2 color = vec2(0.0);      vec2 total = vec2(0.0);            /* randomize the lookup values to hide the fixed number of samples */      float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);            for (float t = -30.0; t <= 30.0; t++) {        float percent = (t + offset - 0.5) / 30.0;        float weight = 1.0 - abs(percent);        vec2 sample = texture2D(texture, texCoord + delta * percent).xy;        color.x += sample.x * weight;        total.x += weight;        if (abs(t) < 15.0) {          weight = weight * 2.0 - 1.0;          color.y += sample.y * weight;          total.y += weight;        }      }      float c = clamp(10000.0 * (color.y / total.y - color.x / total.x) + 0.5, 0.0, 1.0);      gl_FragColor = vec4(c, c, c, 1.0);    }  "),n.simpleShader.call(this,t.edgeWork1,{delta:[e/this.width,0]}),n.simpleShader.call(this,t.edgeWork2,{delta:[0,e/this.height]}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(3),l=r(0),u=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(l)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){var o=l.get("gl");return o.hexagonalPixelate=o.hexagonalPixelate||new a.default(null,"    uniform sampler2D texture;    uniform vec2 center;    uniform float scale;    uniform vec2 texSize;    varying vec2 texCoord;    void main() {      vec2 tex = (texCoord * texSize - center) / scale;      tex.y /= 0.866025404;      tex.x -= tex.y * 0.5;            vec2 a;      if (tex.x + tex.y - floor(tex.x) - floor(tex.y) < 1.0) a = vec2(floor(tex.x), floor(tex.y));      else a = vec2(ceil(tex.x), ceil(tex.y));      vec2 b = vec2(ceil(tex.x), floor(tex.y));      vec2 c = vec2(floor(tex.x), ceil(tex.y));            vec3 TEX = vec3(tex.x, tex.y, 1.0 - tex.x - tex.y);      vec3 A = vec3(a.x, a.y, 1.0 - a.x - a.y);      vec3 B = vec3(b.x, b.y, 1.0 - b.x - b.y);      vec3 C = vec3(c.x, c.y, 1.0 - c.x - c.y);            float alen = length(TEX - A);      float blen = length(TEX - B);      float clen = length(TEX - C);            vec2 choice;      if (alen < blen) {        if (alen < clen) choice = a;        else choice = c;      } else {        if (blen < clen) choice = b;        else choice = c;      }            choice.x += choice.y * 0.5;      choice.y *= 0.866025404;      choice *= scale / texSize;      gl_FragColor = texture2D(texture, choice + center / texSize);    }  "),n.simpleShader.call(this,o.hexagonalPixelate,{center:[e,t],scale:r,texSize:[this.width,this.height]}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=l.get("gl");return t.ink=t.ink||new a.default(null,"    uniform sampler2D texture;    uniform float strength;    uniform vec2 texSize;    varying vec2 texCoord;    void main() {      vec2 dx = vec2(1.0 / texSize.x, 0.0);      vec2 dy = vec2(0.0, 1.0 / texSize.y);      vec4 color = texture2D(texture, texCoord);      float bigTotal = 0.0;      float smallTotal = 0.0;      vec3 bigAverage = vec3(0.0);      vec3 smallAverage = vec3(0.0);      for (float x = -2.0; x <= 2.0; x += 1.0) {        for (float y = -2.0; y <= 2.0; y += 1.0) {          vec3 sample = texture2D(texture, texCoord + dx * x + dy * y).rgb;          bigAverage += sample;          bigTotal += 1.0;          if (abs(x) + abs(y) < 2.0) {            smallAverage += sample;            smallTotal += 1.0;          }        }      }      vec3 edge = max(vec3(0.0), bigAverage / bigTotal - smallAverage / smallTotal);      gl_FragColor = vec4(color.rgb - dot(edge, edge) * strength * 100000.0, color.a);    }  "),n.simpleShader.call(this,t.ink,{strength:e*e*e*e*e,texSize:[this.width,this.height]}),this};var o=r(2),a=function(e){return e&&e.__esModule?e:{default:e}}(o),n=r(1),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r,n){var l=i.get("gl");return l.bulgePinch=l.bulgePinch||(0,o.warpShader)("    uniform float radius;    uniform float strength;    uniform vec2 center;  ","    coord -= center;    float distance = length(coord);    if (distance < radius) {      float percent = distance / radius;      if (strength > 0.0) {        coord *= mix(1.0, smoothstep(0.0, radius / distance, percent), strength * 0.75);      } else {        coord *= mix(1.0, pow(percent, 1.0 + strength * 0.75) * radius / distance, 1.0 - percent);      }    }    coord += center;  "),a.simpleShader.call(this,l.bulgePinch,{radius:r,strength:(0,a.clamp)(-1,n,1),center:[e,t],texSize:[this.width,this.height]}),this};var o=r(3),a=r(1),n=r(0),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(n)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){var i=l.get("gl");if(i.matrixWarp=i.matrixWarp||(0,o.warpShader)("    uniform mat3 matrix;    uniform bool useTextureSpace;  ","    if (useTextureSpace) coord = coord / texSize * 2.0 - 1.0;    vec3 warp = matrix * vec3(coord, 1.0);    coord = warp.xy / warp.z;    if (useTextureSpace) coord = (coord * 0.5 + 0.5) * texSize;  "),e=Array.prototype.concat.apply([],e),4==e.length)e=[e[0],e[1],0,e[2],e[3],0,0,0,1];else if(9!=e.length)throw"can only warp with 2x2 or 3x3 matrix";return n.simpleShader.call(this,i.matrixWarp,{matrix:t?(0,a.getInverse)(e):e,texSize:[this.width,this.height],useTextureSpace:0|r}),this};var o=r(3),a=r(4),n=r(1),i=r(0),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(i)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var r=o.getSquareToQuad.apply(null,t),a=o.getSquareToQuad.apply(null,e),n=(0,o.multiply)((0,o.getInverse)(r),a);return this.matrixWarp(n)};var o=r(4)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r,n){var l=i.get("gl");return l.swirl=l.swirl||(0,o.warpShader)("    uniform float radius;    uniform float angle;    uniform vec2 center;  ","    coord -= center;    float distance = length(coord);    if (distance < radius) {      float percent = (radius - distance) / radius;      float theta = percent * percent * angle;      float s = sin(theta);      float c = cos(theta);      coord = vec2(        coord.x * c - coord.y * s,        coord.x * s + coord.y * c      );    }    coord += center;  "),a.simpleShader.call(this,l.swirl,{radius:r,center:[e,t],angle:n,texSize:[this.width,this.height]}),this};var o=r(3),a=r(1),n=r(0),i=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}(n)}])});